---
- name: "Create {{include|upper}} directories & files, source temporary facts"
  set_fact:
  args:
    _dir: "{{FS_CONTAINERED|default(False)|ternary(relative, fsh)}}"
    _link: "{{FS_CONTAINERED|default(False)|ternary(fsh, relative)}}"
    _upper: "{{upper}}"
    _vals: "{{vals}}"
    _stat:
      results:
        - stat:
            exists: False
        - stat:
            exists: False
  vars:
    fsh: "{{hostvars[inventory_hostname][include|upper]|default(vars[include|upper])}}"
    relative: "{{DIR}}/{{include}}"
    upper: "{{include|upper}}"
    names:
      sDir: "{{upper}}S_DIR"
      dirs: "{{upper}}_DIRS"
      dir: "{{upper}}_DIR"
      files: "{{upper}}_FILES"
      d: "{{upper}}_D"
      prop: "{{upper}}_PROP"
      bypass: "{{upper}}_BYPASS"
      linkProp: "{{upper}}_LINK_PROP"
      linkBypass: "{{upper}}_LINK_BYPASS"
    vals:
      sDir: "{{hostvars[inventory_hostname][names.sDir]|default(vars[names.sDir]|default(False))}}"
      dirs: "{{hostvars[inventory_hostname][names.dirs]|default(vars[names.dirs]|default(False))}}"
      dir: "{{hostvars[inventory_hostname][names.dir]|default(vars[names.dir]|default(False))}}"
      d: "{{hostvars[inventory_hostname][names.d]|default(vars[names.d]|default(False))}}"
      files: "{{hostvars[inventory_hostname][names.files]|default(vars[names.files]|default(False))}}"
      prop: "{{hostvars[inventory_hostname][names.prop]|default(vars[names.prop]|default({}))}}"
      bypass: "{{(DIR_BYPASS|default(False) or hostvars[inventory_hostname][names.bypass]|default(vars[names.bypass]|default(False))) or not (names.sDir or names.dirs or names.dir or names.files or names.d)}}"
      linkProp: "{{hostvars[inventory_hostname][names.linkProp]|default(vars[names.linkProp]|default({}))}}"
      linkBypass: "{{(DIR_LINK_BYPASS|default(False) or hostvars[inventory_hostname][names.linkBypass]|default(vars[names.linkBypass]|default(False))) or not (names.sDir or names.dirs or names.dir or names.files or names.d)}}"

- name: "Test for {{_upper}} dir and link"
  stat:
    path: "{{item}}"
  register: _stat
  when: not FS_DIR_TOP_PROPER|default(False)
  with_items:
  - "{{_dir}}"
  - "{{_link}}"

# create main directory
- name: "Create top {{_upper}} directory"
  file:
    path: "{{_dir}}"
    state: directory
    mode: "{{_vals.props.mode|default(DIRMODE|default(omit, true), true)}}"
    owner: "{{should_become|ternary(owner|default(ansible_user_id, true),omit)}}"
    group: "{{should_become|ternary(group|default(ansible_user_gid, true),omit)}}"
  become: "{{should_become}}"
  when: not _vals.bypass and not _stat.results[0].stat.exists
  vars:
    owner: "{{_vals.prop.owner|default(OWNER|default(none, true), true)}}"
    group: "{{_vals.prop.group|default(GROUP|default(none, true), true)}}"
    should_become: "{{_dir|should_become(owner, ansible_user_id, group, ansible_user_gid)}}"

# link include dir into DIR
- name: "Link {{_upper}}"
  file:
    src: "{{_dir}}"
    dest: "{{_link}}"
    state: link
    owner: "{{should_become|ternary(owner|default(ansible_user_id, true),omit)}}"
    group: "{{should_become|ternary(group|default(ansible_user_gid, true),omit)}}"
  become: "{{should_become}}"
  when: not _vals.linkBypass and not _stat.results[1].stat.exists
  vars:
    owner: "{{_vals.prop.owner|default(OWNER|default(none, true), true)}}"
    group: "{{_vals.prop.group|default(GROUP|default(none, true), true)}}"
    should_become: "{{_link|should_become(owner, ansible_user_id, group, ansible_user_gid)}}"

# create subdirs
- name: "Create {{_upper}} subdirs and .d dirs"
  file:
    path: "{{subdir}}"
    state: directory
    mode: "{{item.mode|default(_vals.prop.mode|default(DIRMODE, true), true)}}"
    owner: "{{should_become|ternary(owner|default(ansible_user_id, true),omit)}}"
    group: "{{should_become|ternary(group|default(ansible_user_gid, true),omit)}}"
  with_items: "{{_vals.dirs|default([], true) + _vals.d|default([], true)}}"
  become: "{{should_become}}"
  when: _vals.dirs or _vals.d
  vars:
    owner: "{{item.owner|default(_vals.prop.owner|default(OWNER|default(none, true), true), true)}}"
    group: "{{item.group|default(_vals.prop.group|default(GROUP|default(none, true), true), true)}}"
    subdir: "{{_dir}}/{{item.name|default(item)}}" 
    should_become: "{{subdir|should_become(owner, ansible_user_id, group, ansible_user_gid)}}"

# include files
- name: "Do {{_upper}} lineinfile"
  lineinfile:
    dest: "{{dest}}"
    line: "{{item.line}}"
    regexp: "{{item.regexp|default('^' + item.line)}}"
    create: "{{item.create|default(True)}}"
    state: "{{item.state|default(omit)}}"
    owner: "{{should_become|ternary(owner|default(ansible_user_id, true),omit)}}"
    group: "{{should_become|ternary(group|default(ansible_user_gid, true),omit)}}"
  with_items: "{{_vals.files|default([])}}"
  become: "{{should_become}}"
  when: item.line|default(False)
  vars:
    owner: "{{item.owner|default(_vals.prop.owner|default(OWNER|default(none, true), true), true)}}"
    group: "{{item.group|default(_vals.prop.group|default(GROUP|default(none, true), true), true)}}"
    dest: "{{item.dest|default(item.name|default(item))|defaultDir(_dir)}}"
    should_become: "{{dest|should_become(owner, ansible_user_id, group, ansible_user_gid)}}"

- name: "Create {{_upper}} files"
  copy:
    content: "{{all}}"
    dest: "{{dest}}"
    mode: "{{item.mode|default(_vals.prop.mode|default(FILEMODE, true), true)}}"
    owner: "{{dest|should_become|ternary(owner|default(ansible_user_id, true),omit)}}"
    group: "{{dest|should_become|ternary(group|default(ansible_user_gid, true),omit)}}"
    # TODO: ansible 2.3+:
    #mode: "{{COPY_MODE|default(preserve)}}"
  loop: "{{_vals.files|default([], true)}}"
  loop_control:
    index_var: idx
  become: "{{should_become}}"
  when: not item.line|default(False)
  vars:
    srcDir: "files/{{ TYPE|default(NAME) }}"
    #src: "{{ item.src|default(item.name|default(item, true), true)|defaultDir(srcDir) }}"
    src: "{{ item.src|default(item.name|default(item, true), true)|defaultDir('files/'+TYPE|default(NAME)) if not item.srcTemplate is defined else lookup('templateVar', item.srcTemplate)|defaultDir('files/'+TYPE|default(NAME)) }}"
    files: "{{include|upper}}_FILES"
    # unsafe because _vals.files is looked up?
    #content: "{{lookup('templateVar', item.content)}}"
    content: "{{lookup('templateVar', (hostvars[inventory_hostname][files]|default(vars[files]|default(False)))[idx].content) if item.content|default(False) else ''}}"
    fileType: "{{'file' if item.raw|default(False) else 'template'}}"
    file: "{{lookup(fileType, item.src|default(item.name|default(item, true), true)|defaultDir(srcDir)) if not item.content|default(False) and not item.var|default(False) else '' }}"
    var: "{{hostvars[inventory_hostname][item.var]|default(vars[item.var]) if item.var|default(False) else '' }}"
    all: "{{ content|default('') + file|default('') + var|default('') }}"
    owner: "{{item.owner|default(_vals.prop.owner|default(OWNER|default(none, true), true), true)}}"
    group: "{{item.group|default(_vals.prop.group|default(GROUP|default(none, true), true), true)}}"
    dest: "{{ item.dest|default(item.name|default(item, true), true)|defaultDir(_dir) if not item.destTemplate is defined else lookup('templateVar', item.destTemplate)|defaultDir(_dir) }}"
    should_become: "{{dest|should_become(owner, ansible_user_id, group, ansible_user_gid)}}"

- name: "Assemble .d directory"
  assemble:
    src: "{{dest}}.d"
    dest: "{{dest}}"
    backup: "{{item.backup|default(True)}}"
    mode: "{{item.mode|default(_vals.prop.mode|default(FILEMODE, true), true)}}"
    owner: "{{should_become|ternary(owner|default(ansible_user_id, true),omit)}}"
    group: "{{should_become|ternary(group|default(ansible_user_gid, true),omit)}}"
  become: "{{_dest|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
  when: _vals.d
  with_items: "{{_vals.d|default([], true)}}"
  vars:
    owner: "{{item.owner|default(_vals.prop.owner|default(OWNER|default(none, true), true), true)}}"
    group: "{{item.group|default(_vals.prop.group|default(GROUP|default(none, true), true), true)}}"
    dest: "{{_dir}}/{{item.dest|default(item.name|default(item))}}"
    should_become: "{{dest|should_become(owner, ansible_user_id, group, ansible_user_gid)}}"
