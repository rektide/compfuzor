---
- debug: "msg='Create {{include|upper}} directories & files'"

# initialize temporary vars
- name: "source temporary {{include|upper}} facts"
  set_fact:
  args:
    _dir: "{{include|upper+'S_DIR'}}" # name of directory to use
    _dirs: "{{include|upper}}_DIRS" # subdirectories to create, or True
    _base: "{{include|upper}}_DIR" # create empty directory
    _files: "{{include|upper}}_FILES" # files to template into place
    _d: "{{include|upper}}_D" # assemblies to create
    _bypass: "{{include|upper}}_BYPASS" # skip doing this stuff!
    _link_bypass: "{{include|upper}}_LINK_BYPASS"
    __defaultDir: "{{hostvars[inventory_hostname][include|upper]|default(vars[include|upper])}}" # lookup the path for the dir
    _go: True
    _has_defaultDir:
      stat:
        exists: False
- name: "Cancel go if nothing to do"
  set_fact: _go="" # do not go if bypass, or nothing is defined pertaining to this component
  when: "({{_bypass}}|default(True)) and not (({{_dirs}}|default(False)) or ({{_files}}|default(False)) or ({{_d}}|default(False)) or ({{_base}}|default(False)))"
- name: "Test for top {{include|upper}} directory - will permit"
  stat:
    path: "{{_path}}"
  register: _has_defaultDir
  changed_when: _has_defaultDir.stat.exists
  when: not FS_DIR_TOP_PROPER|default(False) # opposite of a bypass, hard check for proper top dir if set, will let creation attempts run even though something exists
  vars:
    _path: "{{__defaultDir if not FS_CONTAINERED|default(False) else DIR+'/'+include|lower}}"
- name: "Set _has_defaultDir if FS_DIR_TOP_PROPER is set"
  set_fact:
    _has_defaultDir:
      stat:
        exists: False
  when: FS_DIR_TOP_PROPER|default(False) # opposite of a bypass, hard check for proper top dir if set, will let creation attempts run even though something exists

# create main directory
- name: "Create top {{include|upper}} directory"
  file:
    path: "{{__defaultDir}}"
    state: directory
    mode: "{{mode|default(770)}}"
    owner: "{{OWNER|default(omit)}}"
    group: "{{GROUP|default(omit)}}"
  become: "{{__defaultDir|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
  when: _go|bool and not FS_CONTAINED|default(False) and not _has_defaultDir.stat.exists
# link include dir into DIR
- name: "Link top {{include|upper}} directory into `DIR`RUN"
  file:
    src: "{{__defaultDir}}"
    dest: "{{_dest}}"
    state: link
    owner: "{{OWNER|default(omit)}}"
    group: "{{GROUP|default(omit)}}"
  become: "{{_dest|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
  when: "_go|bool and not DIR_BYPASS|default(False) and not DIR_LINK_BYPASS|default(False) and not {{_link_bypass}}|default(False) and not FS_CONTAINED|default(False) and not _has_defaultDir.stat.exists"
  vars:
    _dest: "{{DIR}}/{{include|lower}}"
# fs_contained - reverses stoage characteristic, installing under DIR rather than about
# create include subdirs in DIR
- name: "Create DIR's {{include|upper}} subdirectory - contained mode"
  file:
    path: "{{_dest}}"
    state: directory
    mode: "{{mode|default(770)}}"
    owner: "{{OWNER|default(omit)}}"
    group: "{{GROUP|default(omit)}}"
  become: "{{_dest|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
  when: _go|bool and FS_CONTAINED|default(False) and not _has_defaultDir
  vars:
    _dest: "{{DIR}}/{{include|lower}}"
# place links to subdirs into common locations
- name: "Link {{include|upper}} subdirectory into common global space- contained mode"
  file:
    src: "{{DIR}}/{{include|lower}}"
    dest: "{{__defaultDir}}"
    state: link
    owner: "{{OWNER|default(omit)}}"
    group: "{{GROUP|default(omit)}}"
  become: "{{__defaultDir|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
  when: "_go|bool and not DIR_BYPASS|default(False) and not DIR_LINK_BYPASS|default(False) and not {{_link_bypass}}|default(False) and FS_CONTAINED|default(False) and not _has_defaultDir.stat.exists"
# create subdirs
- name: "Create {{include|upper}} subdirs"
  file:
    path: "{{_defaultItem}}"
    state: directory
    owner: "{{OWNER|default(omit)}}"
    group: "{{GROUP|default(omit)}}"
  with_items: "{{hostvars[inventory_hostname][_dirs]|default(vars[_dirs])|default([])}}"
  become: "{{_defaultItem|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
  when: "_go|bool and {{_dirs}} is sequence" # defined and {{dirs}} != True"
  vars:
    _defaultItem: "{{hostvars[inventory_hostname][include|upper]|default(vars[include|upper])}}/{{item}}" # lookup the path for the dir
# create .d subdirectories
- name: "Create {{include|upper}} .d directories"
  file:
    path: "{{_defaultItem}}.d"
    state: directory
    mode: "{{mode|default(770)}}"
    owner: "{{OWNER|default(omit)}}"
    group: "{{GROUP|default(omit)}}"
  with_items: "{{hostvars[inventory_hostname][_d]|default(vars[_d])|default([])}}"
  become: "{{_defaultItem|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
  when: _go|bool and hostvars[inventory_hostname][_d]|default(vars[_d])|default(False)
  vars:
    _defaultItem: "{{hostvars[inventory_hostname][include|upper]|default(vars[include|upper])}}/{{item}}" # lookup the path for the dir

# include files
- name: "Create {{include|upper}} files"
  template:
    src: "files/{{TYPE|default(NAME)}}/{{item.src|default(item.name)|default(item)}}"
    dest: "{{_defaultItem}}"
    owner: "{{OWNER|default(omit)}}"
    group: "{{GROUP|default(omit)}}"
  with_items: "{{ hostvars[inventory_hostname][_files]|default(vars[_files])|default([])}}"
  become: "{{_defaultItem|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
  when: _go|bool and not item.raw|default(False) and not item.content is defined and not item.var|default(False) and not item.line|default(False)
  vars:
    _defaultItem: "{{hostvars[inventory_hostname][include|upper]|default(vars[include|upper])}}/{{item}}" # lookup the path for the dir
- name: "Do {{include|upper}} lineinfile"
  lineinfile:
    dest: "{{_defaultItem}}"
    line: "{{item.line}}"
    regexp: "{{item.regexp|default('^' + item.line)}}"
    create: "{{item.create|default(True)}}"
    state: "{{item.state|default(omit)}}"
    owner: "{{OWNER|default(omit)}}"
    group: "{{GROUP|default(omit)}}"
  with_items: "{{ hostvars[inventory_hostname][_files]|default(vars[_files])|default([])}}"
  become: "{{_defaultItem|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
  when: _go|bool and item.line|default(False)
  vars:
    _defaultItem: "{{hostvars[inventory_hostname][include|upper]|default(vars[include|upper])}}/{{item}}" # lookup the path for the dir
- name: "Create raw {{include|upper}} files"
  copy:
    src: "files/{{TYPE|default(NAME)}}/{{item.src|default(item.name)|default(item)}}"
    dest: "{{_defaultItem}}"
    owner: "{{OWNER|default(omit)}}"
    group: "{{GROUP|default(omit)}}"
  with_items: "{{ hostvars[inventory_hostname][_files]|default(vars[_files])|default([])}}"
  become: "{{_defaultItem|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
  when: _go|bool and item.raw|default(False) and not item.content is defined and not item.var|default(False) and not item.line|default(False)
  vars:
    _defaultItem: "{{hostvars[inventory_hostname][include|upper]|default(vars[include|upper])}}/{{item.dest|default(item.item)}}" # lookup the path for the dir
- name: "Create {{include|upper}} content files"
  template:
    src: "files/content"
    dest: "{{_defaultItem}}"
    owner: "{{OWNER|default(omit)}}"
    group: "{{GROUP|default(omit)}}"
  with_items: "{{ hostvars[inventory_hostname][_files]|default(vars[_files])|default([])}}"
  become: "{{_defaultItem|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
  when: _go|bool and not item.raw|default(False) and item.content is defined and not item.var|default(False) and not item.line|default(False)
  vars:
    _defaultItem: "{{hostvars[inventory_hostname][include|upper]|default(vars[include|upper])}}/{{item.name}}" # lookup the path for the dir
# I believe this used to be used a lot, and let the user specify indirectly what goes in. I believe ansible changed.
#- name: "Create {{include|upper}} vars files"
#  copy:
#    content: "{{ hostvars[inventory_hostname][item.var]|default(vars[item.var]) }}"
#    dest: "{{_defaultItem}}"
#    owner: "{{OWNER|default(omit)}}"
#    group: "{{GROUP|default(omit)}}"
#  with_items: "{{ hostvars[inventory_hostname][_files]|default(vars[_files])|default([])}}"
#  become: "{{_defaultItem|should_become(OWNER|default(), ansible_user_id, GROUP|default(), ansible_user_gid)}}"
#  when: _go|bool and item.var|default(False) and not item.line|default(False)
