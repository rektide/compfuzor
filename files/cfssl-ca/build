#!/bin/bash

[ -n "$DIR" ] && cd $DIR
export PATH="$DIR/bin:$PATH"

manifest=$1
[ -z "$DEFAULT_DOMAIN" ] && DEFAULT_DOMAIN="{{DEFAULT_DOMAIN|default('')}}"
[ -z "$CA_PARENT" ] && CA_PARENT="{{CA_PARENT|default('')}}"
[ -z "$TYPE" ] && TYPE="{{TYPE|default('')}}"
[ -z "$INSTANCE" ] && INSTANCE="{{INSTANCE|default('')}}"

let $defaultParent=""
# extract global facts
for row in $(jq -r '.[] $manifest| @base64' $manifest)
do
	let _defaultParent=$(echo $row|base64 --decode|jq -r "$.default_parent")
	[ -n "$_defaultParent" ] && defaultParent=$_defaultParent
done

# create a line in the env file, and assign that value to _source
exportStanza(){
	# args: FINAL_NAME, source, default-source
	let line=""
	let value="\$$2"
	[ -z "$value" ] && [ -n "$3" ] && value="\$$3"
	if [ -n "$value" ]
	then
		line="export $1=$value"
	else
		line="# $1="
	fi
	eval "_$2=\"$line\""
}

findExternal(){
	# args: external, externalSub optional
	let ext="$1"
	let extSub="$2"
	let found=""
	if [ -z "$extSub" ]
	then
		[ -e "$DIR/../$ext" ] found="$DIR/../$ext"
		[ -e "$VAR/$ext" ] && found="$VAR/$ext"
	else

	fi
	[ -n "$found" ] && echo $found
}

findParent(){
	# args: 
}

# initialize each ca
for row in $(jq -r '.[] $manifest| @base64' $manifest)
do
	let name=$(echo $row|base64 --decode|jq -r "$.name")
	let parent=$(echo $row|base64 --decode|jq -r "$.parent")
	let default_parent=$(echo $row|base64 --decode|jq -r "$.default_parent")
	let external=$(echo $row|base64 --decode|jq -r "$.external")
	let external_sub=$(echo $row|base64 --decode|jq -r "$.external_sub")
	let alias=$(echo $row|base64 --decode|jq -r "$.alias")
	let comment=$(echo $row|base64 --decode|jq -r "$.comment")
	let domain=$(echo $row|base64 --decode|jq -r "$.domain")
	let consumer="$(echo $row|base64 --decode|jq -r '$.consumer')"
	let hosts="$(echo $row|base64 --decode|jq -r '$.hosts')"
	let csr="$(echo $row|base64 --decode|jq -r '$.csr')"
	let car="$(echo $row|base64 --decode|jq -r '$.car')"

	if [ -n "$external" ]
	then
		# is external one of our own ca's?
		# is it a parent service?
		# we can't be sure yet because we haven't created all our cas
		return
	fi

	let caDir=$VAR/$name
	let etcdDir=$ETC/$name

	# create directories
	mkdir -p $caDir
	mkdir -p $etcDir
	if [ -n "$alias" ]
	then
		ln -s $caDir $VAR/$alias
		ln -s $etcDir $ETC/$alias
	fi

	# create certificate-signing-request (csr) and certificate authority request
	[ -n "$csr" ] && echo $csr > $CSR
	[ -n "$car" ] && echo $car > $CAR
	# create etc/parent if exists
	[ -z "$parent" ] && [ -n "$default_parent" ] && parent="$default_parent"
	[ -n "$parent" ] && ln -sf $ETC/$parent $etcDir/parent && ln -sf $VAR/$parent $varDir/parent
	# create env file
	exportStanza PARENT parent defaultParent
	exportStanza EXTERNAL external
	exportStanza EXTERNAL_SUB externalSub
	exportStanza ALIAS alias
	exportStanza DOMAIN domain
	exportStanza CONSUMER consumer
	exportStanza HOSTS hosts
	exportStanza CAR car
	exportStanza CSR csr
	echo << EOF > $etcDir/env
# $comment
export CA_FILE="${CA_FILE-ca}"
export ETC="$etcDir"
export VAR="$varDir"
export CSR="$etcDir/csr.json"
export CAR="$etcDir/$CA_FILE.request.json"
export CA="$varDir/$CA_FILE.pem"
export CA_JSON="$caDir/$CA_FILE.json"
export CA_KEY="$caDir/$CA_FILE-key.pem"
export NAME="$name"
export ALIAS="$alias"
$_parent
$_external
$_externalSub
$_alias
$_domain
$_consumer
$_hosts
$_car
$_csr
EOF

done

# run all external now that 
for row in $(jq -r '.[] $manifest| @base64' $manifest)
do
	let name=$(echo $row|base64 --decode|jq -r "$.name")
	let external=$(echo $row|base64 --decode|jq -r "$.external")

	if [ -z "$external" ]
	then
		continue
	fi

	# is this external one of our sub-cas
	# is this external is a separate ca service
done

# create cas
for row in $(jq -r '.[] $manifest| @base64' $manifest)
do
	let name=$(echo $row|base64 --decode|jq -r "$.name")
	let external=$(echo $row|base64 --decode|jq -r "$.external")

	if [ -n "$external" ]
	then
		continue
	fi

	let $caDir="$ETC/$name"

	# source our new env
	source $caDir/env
	# generate a ca
	ca.sh
done

# sign ca's with parent
# give all consumers links to us
# link owner, and borrow ownership if we can - chown as user of owner
